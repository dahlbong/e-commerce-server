@startuml
title 이커머스 서비스 클래스 다이어그램

' 사용자 관련 클래스
class User {
  +userId: UUID
  +email: String
  +name: String
  +phoneNumber: String
  +address: String
  +isActive: Boolean
  +updateProfile(name: String, phoneNumber: String, address: String): void
  +deactivate(): void
  +reactivate(): void
}

class Wallet {
  +walletId: UUID
  +balance: Double
  +deposit(amount: Double): void
  +withdraw(amount: Double): Boolean
  +hasEnoughBalance(amount: Double): Boolean
}

class Transaction {
  +transactionId: UUID
  +amount: Double
  +type: TransactionType
  +date: DateTime
  +description: String
  +isDeposit(): Boolean
  +isWithdrawal(): Boolean
}

' 상품 관련 클래스
class Product {
  +productId: UUID
  +name: String
  +description: String
  +basePrice: Double
  +category: String
  +isActive: Boolean
  +updateDetails(name: String, description: String, price: Double): void
  +updateCategory(category: String): void
  +activate(): void
  +deactivate(): void
}

class ProductVariant {
  +variantId: UUID
  +optionName: String
  +additionalPrice: Double
  +stock: Integer
  +updateStock(quantity: Integer): void
  +isInStock(): Boolean
  +calculatePrice(basePrice: Double): Double
}

class ProductImage {
  +imageId: UUID
  +imageUrl: String
  +sequence: Integer
}

' 장바구니 관련 클래스
class Cart {
  +cartId: UUID
  +createdAt: DateTime
  +updatedAt: DateTime
  +addItem(item: CartItem): void
  +removeItem(item: CartItem): void
  +updateItemQuantity(item: CartItem, quantity: Integer): void
  +clear(): void
  +calculateTotal(): Double
  +isEmpty(): Boolean
  +checkout(): Order
}

class CartItem {
  +cartItemId: UUID
  +product: Product
  +variant: ProductVariant
  +quantity: Integer
  +updateQuantity(quantity: Integer): void
  +calculateSubtotal(): Double
  +isAvailable(): Boolean
}

' 주문 관련 클래스
class Order {
  +orderId: UUID
  +status: OrderStatus
  +shippingAddress: String
  +totalAmount: Double
  +discountAmount: Double
  +finalAmount: Double
  +createdAt: DateTime
  +updatedAt: DateTime
  +coupon: UserCoupon
  +addItem(item: OrderItem): void
  +calculateAmounts(): void
  +applyDiscount(amount: Double): void
  +updateStatus(status: OrderStatus): void
  +cancel(): Boolean
  +isPaid(): Boolean
  +isShipped(): Boolean
  +isDelivered(): Boolean
}

class OrderItem {
  +orderItemId: UUID
  +product: Product
  +variant: ProductVariant
  +quantity: Integer
  +unitPrice: Double
  +calculateSubtotal(): Double
}

' 결제 관련 클래스
class Payment {
  +paymentId: UUID
  +amount: Double
  +method: String
  +status: PaymentStatus
  +transactionId: String
  +paymentDate: DateTime
  +process(): Boolean
  +verify(): Boolean
  +refund(): Boolean
  +isSuccessful(): Boolean
}

' 쿠폰 관련 클래스
class Coupon {
  +couponId: UUID
  +code: String
  +discountAmount: Double
  +discountPercentage: Double
  +minOrderAmount: Double
  +startDate: DateTime
  +endDate: DateTime
  +isActive: Boolean
  +calculateDiscount(orderAmount: Double): Double
  +isValid(): Boolean
  +isExpired(): Boolean
  +isApplicable(orderAmount: Double): Boolean
}

class UserCoupon {
  +userCouponId: UUID
  +coupon: Coupon
  +isUsed: Boolean
  +usedDate: DateTime
  +issueDate: DateTime
  +use(): void
  +canBeUsed(): Boolean
}

' 관계 정의
User "1" -- "0..1" Wallet : 보유
User "1" -- "0..1" Cart : 소유
User "1" -- "*" Order : 주문
User "1" -- "*" UserCoupon : 쿠폰보유

Wallet "1" -- "*" Transaction : 기록
Wallet "0..1" -- "*" Payment : 처리

Product "1" -- "*" ProductVariant : 옵션
Product "1" -- "*" ProductImage : 이미지

Cart "1" -- "*" CartItem : 포함
CartItem "*" -- "1" Product : 선택
CartItem "*" -- "0..1" ProductVariant : 옵션

Order "1" -- "*" OrderItem : 포함
Order "1" -- "*" Payment : 결제
Order "0..1" -- "1" UserCoupon : 쿠폰적용
OrderItem "*" -- "1" Product : 상품
OrderItem "*" -- "0..1" ProductVariant : 옵션

UserCoupon "*" -- "1" Coupon : 원본쿠폰

@enduml
